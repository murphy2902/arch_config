" vimrc.conf

runtime! archlinux.vim

call plug#begin('~/.config/vim/plugged')

Plug 'bling/vim-airline' "Statusline
Plug 'easymotion/vim-easymotion' "<leader><leader> motions
Plug 'garbas/vim-snipmate' " Automagically completes code blocks
Plug 'honza/vim-snippets' " Required by snipmate
Plug 'justinmk/vim-syntax-extra' " More syntax highlighting
Plug 'jvirtanen/vim-octave' "Extra octave highlighting
Plug 'Lokaltog/powerline-fonts' " Required by airline
Plug 'lilydjwg/colorizer' " Color rgb text
Plug 'MarcWeber/vim-addon-mw-utils' " Required by snipmate
Plug 'scrooloose/nerdtree'
Plug 'tomtom/tlib_vim' " Required by snipmate
Plug 'tpope/vim-endwise' "Automagically closes more stuff
Plug 'tpope/vim-surround' "Surround text with tags and others
Plug 'tpope/vim-fugitive' "Git features
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/mru.vim' "<leader>ru for recently used files
Plug 'Xuyuanp/nerdtree-git-plugin'

call plug#end()


"  General Vim stuff
" " " "


" Stuff with file type detection.
	filetype plugin indent on
" Automatically reads in changes to an edited file.
	set autoread
" Sets the numbers over on the left.  Bretty useful I'd say.
	set nu
" Set the leader
	let mapleader = "\<Space>"
" I don't want no backups!
	set nobackup
" This was recommended to me by a stranger on the internet.
	set nocompatible
" Size of an 'indent'
	set shiftwidth=3
" Size of a hard tab stop
	set tabstop=3
" Spellcheck for vim!
"setlocal spell spelllang=en_us
	nmap <silent> <leader>S :set spell!<CR>
	set sps=best,10
" flashes matching brackets or parentheses
	set showmatch
"show extra whitespace
	set list listchars=tab:»·,trail:·
" This adds whitespace to match the line before the new line.
	set autoindent
	set smartindent
" Show me where my cursor is
	set ruler
" Height of the command bar
	set cmdheight=1
" Highlight search results
	set hlsearch
" TODO WHAT DOES THIS DO!?
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Don't redraw while executing macros (performance)
	set lazyredraw
" For regular expressions turn magic on
	set magic
" No sound.
	set noerrorbells
	set novisualbell
	set t_vb=
	set tm=500
" This brings the airline up
	set modeline
	set ls=2
" Change the location of the viminfo
	set viminfo+=n$XDG_CONFIG_HOME/vim/viminfo


 " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Colors
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" I'd like to dream in colour
syntax on

" Set the colorscheme to a sweet custom variant
" TODO: Figure out how to change this based on the system theme
colorscheme haruko

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Fonts
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Functions
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Syntax Analysis
function! <SID>SynStack()
   if !exists("*synstack")
      return
   endif
   echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Mappings
" " " " " " " " " " " " " " " " " " " " " " " " " " " "


" Show and hide the crosshair
nmap <leader>c :set cul! cuc!<cr>

nmap ;j :bn<CR>
nmap ;k :bp<CR>
nmap ;h :tabp<CR>
nmap ;l :tabn<CR>
nmap ;q :bdelete<CR>


" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" shorter save
nmap <Leader>w :w<CR>
" source the current file
nmap <leader>so :so %<cr>
" replace all
nmap <leader>ra :%s/
nmap <leader>tn :tabnew<CR>

" Toggle whitespace on/off
nmap <leader>sw :set list!<CR>


"set pastetoggle=<C>p " paste mode

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

nmap <leader>ru :MRU<CR>               " MRU
map <leader>ff :NERDTreeToggle<CR>     " NERDTree
nmap <C-S-P> :call <SID>SynStack()<CR> " Syntax Analysis


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Airline
" " " " " " " " " " " " " " " " " " " " " " " " " " " "


let g:airline_theme='ubaryd'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
let g:airline_detect_modified=1   " enable modified detection
let g:airline_detect_paste=1      " enable paste detection


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Eclim
" " " " " " " " " " " " " " " " " " " " " " " " " " " "


let g:EclimCompletionMethod = 'omnifunc'


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" MRU
" " " " " " " " " " " " " " " " " " " " " " " " " " " "


let MRU_File = '/home/ryan/.config/vim/.vim_mru_files'


" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Nerdtree
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Closes vim if nerdtree is the only open window
" Causes error on regular nerdtree close
	"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Changing the arrows
	"let g:NERDTreeDirArrows = 1
	"let g:NERDTreeDirArrowExpandable = '▸'
	"let g:NERDTreeDirArrowCollapsible = '▾'

" Close nerdtree on file open
	let g:NERDTreeQuitOnOpen = 1

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" You Complete Me
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

let g:ycm_path_to_python_interpreter = '/usr/bin/python2'
let g:ycm_global_ycm_extra_conf = '/home/ryan/.config/vim/.ycm_extra_conf.py'

" Debug
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_warning_symbol = '>'
let g:ycm_error_symbol = '>>'
let g:ycm_server_use_vim_stdout = 1
