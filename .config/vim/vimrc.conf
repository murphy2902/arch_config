" vimrc.conf

runtime! archlinux.vim

call plug#begin('~/.config/vim/plugged')

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-surround'
Plug 'Lokaltog/powerline-fonts'
Plug 'bling/vim-airline'
Plug 'vim-scripts/mru.vim'
Plug 'vim-scripts/hexHighlight.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'skammer/vim-css-color'
Plug 'jvirtanen/vim-octave'

call plug#end()

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
"	General Vim stuff
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Stuff with filetype detection.
filetype plugin indent on

" Change the location of the viminfo  
set viminfo+=n$XDG_CONFIG_HOME/vim/viminfo

" Automatically reads in changes to an edited file.  
set autoread

" I don't want no backups!
set nobackup 

" Sets the numbers over on the left.  Bretty useful I'd say.
set nu

" This was recommended to me by a stranger on the internet.
set nocompatible

" Set the leader
let mapleader = "\<Space>"

" I don't know what this does
set expandtab

" Size of a hard tab stop
set tabstop=3

" Size of an 'indent'
set shiftwidth=3

" This adds whitespace to match the line before the new line.
set autoindent
set smartindent

" Show me where my cursor is
set ruler

" Height of the command bar
set cmdheight=1

" Highlight search results
set hlsearch

" TODO WHAT DOES THIS DO!?
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Don't redraw while executing macros (performance)
set lazyredraw

" For regular expressions turn magic on
set magic

" No sound.
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk


 " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Colors
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" I'd like to dream in colour
syntax on

" Set the colorscheme to a sweet custom variant
" TODO: Figure out how to change this based on the system theme
colorscheme haruko

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Fonts
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Functions
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Syntax Analysis
function! <SID>SynStack()
   if !exists("*synstack")
      return
   endif
   echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Mappings
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

" Show and hide the crosshair
nmap <leader>cc :set cul! cuc!<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
imap ;; <Esc>

" Useful mappings for managing tabs
nmap <leader>tn :tabnew<cr>:NERDTree<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>th :tabp<cr>
nmap <leader>tl :tabn<cr>

" Shortcuts
nmap <Leader>w :w<CR>
nmap <leader>so :so %<cr>
nmap <leader>ra :%s/

" Comment visual blocks
vmap <leader>/ :s/^/#/g<cr>

" paste mode
"set pastetoggle=<C>p

" MRU

nmap <leader>ru :MRU<CR>

" NERDTree
map <leader>ff :NERDTreeToggle<cr>

" Syntax Analysis
nmap <C-S-P> :call <SID>SynStack()<CR>
 
" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" Airline
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

" enable modified detection >
let g:airline_detect_modified=1

" enable paste detection >
let g:airline_detect_paste=1

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" MRU
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

let MRU_File = '/home/ryan/.config/vim/.vim_mru_files'

" " " " " " " " " " " " " " " " " " " " " " " " " " " "
" You Complete Me
" " " " " " " " " " " " " " " " " " " " " " " " " " " "

let g:ycm_path_to_python_interpreter = '/usr/bin/python2'
let g:ycm_global_ycm_extra_conf = '/home/ryan/.config/vim/.ycm_extra_conf.py'

" Debug
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_warning_symbol = '>'
let g:ycm_error_symbol = '>>'
let g:ycm_server_use_vim_stdout = 1
