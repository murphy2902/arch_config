" vimrc.conf
" Necessary reading...
" http://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/

runtime! archlinux.vim
autocmd!

if empty($XDG_CACHE_HOME)
  let $XDG_CACHE_HOME = $HOME.'/.cache'
endif
if empty($XDG_CONFIG_HOME)
  let $XDG_CONFIG_HOME = $HOME.'/.config'
endif

if !isdirectory($XDG_CACHE_HOME  . "/vim/swap")
  call mkdir($XDG_CACHE_HOME . "/vim/swap", "p")
endif
set directory=$XDG_CACHE_HOME/vim/swap//,/var/tmp//,/tmp//

if !isdirectory($XDG_CACHE_HOME . "/vim/backup")
  call mkdir($XDG_CACHE_HOME . "/vim/backup", "p")
endif
set backupdir=$XDG_CACHE_HOME/vim/backup//,/var/tmp//,/tmp//

" Double slash does not actually work for backupdir, here's a fix
au BufWritePre * let &backupext='@'.substitute(substitute(substitute(expand('%:p:h'), '/', '%', 'g'), '\', '%', 'g'), ':', '', 'g')

" see :help persistent-undo
if !isdirectory($XDG_CACHE_HOME . "/vim/undo")
  call mkdir($XDG_CACHE_HOME . "/vim/undo", "p")
endif
set undodir=$XDG_CACHE_HOME/vim/undo//,/var/tmp//,/tmp//
set undofile

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

set runtimepath-=~/.vim
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath-=~/.vim/after
set runtimepath+=$XDG_CONFIG_HOME/vim/after


" Plugin Manager
" " "

if empty(glob('~/.config/vim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(expand("$XDG_CONFIG_HOME/vim/plugged"))

	" Autocompletion
	Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
	Plug 'scrooloose/syntastic'
	Plug 'tpope/vim-endwise' " Automagically closes more stuff
	
	" Base64
	Plug 'christianrondeau/vim-base64'
	
	" CSV
	Plug 'chrisbra/csv.vim'
	
	" Go
	Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
	
	" LaTeX
	Plug 'vim-latex/vim-latex'
	
	" Linux C
	Plug 'vivien/vim-linux-coding-style'
	
	" Jupyter
	Plug 'szymonmaszke/vimpyter'
	
	" Markdown
	Plug 'godlygeek/tabular' " Dependency
	Plug 'sedm0784/vim-you-autocorrect'
	Plug 'plasticboy/vim-markdown'
	
	" Python
	Plug 'Vimjas/vim-python-pep8-indent'
	
	" Scala
	Plug 'derekwyatt/vim-scala'
	
	" Tmux
	Plug 'tmux-plugins/vim-tmux'
	
	" Octave
	Plug 'jvirtanen/vim-octave'
	
	" Protobuf
	Plug 'uarun/vim-protobuf'
	
	" XML, HTML
	Plug 'othree/xml.vim'
	
	" External tool interfacing
	Plug 'dense-analysis/ale' " Linting using Language Server Protocols
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'tpope/vim-fugitive' " Git features
	Plug 'mileszs/ack.vim'
	Plug 'airblade/vim-gitgutter'
	
	" Vim specific stuff
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-fireplace'
	Plug 'tpope/vim-surround'
	Plug 'Xuyuanp/nerdtree-git-plugin'
	Plug 'scrooloose/nerdtree'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'vim-scripts/mru.vim'
	Plug 'easymotion/vim-easymotion'
	Plug 'justinmk/vim-syntax-extra'
	Plug 'lilydjwg/colorizer'
	Plug 'vim-ruby/vim-ruby'
	Plug 'sedm0784/vim-you-autocorrect'
	
	" LiveCoding
	Plug 'supercollider/scvim'
	Plug 'tidalcycles/vim-tidal'

call plug#end()


" Abbreviations
" " "

	au FileType vim abbrev =header= "<CR>" " "<esc>kA


" Autocommands
" " "

	"au BufLeave * let g:prevBuf = 
	au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
	au FileType markdown setlocal tw=80 noexpandtab EnableAutocorrect
	au FileType go setlocal sw=3 ts=3 noexpandtab
	au BufNewFile * call LoadTemplate()

" Python
	au FileType py setlocal shiftwidth=4 tabstop=4 expandtab


" Colors
" " "

	set t_Co=256
	syntax on

	" TODO: Figure out how to change this based on the system theme
	colorscheme haruko


" Functions
" " "

	function! LoadTemplate()
		silent! 0r ~/.config/vim/skel/tmpl.%:e

		" Highlight %VAR% placeholders with the Todo color group
		syn match Todo "%\u\+%" containedIn=ALL
	endfunction

	" Syntax Analysis
	function! <SID>SynStack()
		if !exists("*synstack")
			return
		endif
		echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
	endfunc

	fun! ToggleCC()
		if &cc == ''
			set cc=+1
		else
			set cc=
		endif
	endfun


" Mappings
" " "

	let mapleader = "\<esc>"
	let maplocalleader = "\<space>"

	nno <CR> @

	" Return to visual selection when indenting
	vno < <gv
	vno > >gv

	" Search selected text
	vno // y/<C-R>"<CR>p

	no <silent> <bs> :noh<cr>

	"set pastetoggle=<C>p " paste mode
	nno <silent> <leader>c :set cul! cuc! rnu! spell!<cr>:call ToggleCC()<cr>
	nno <silent> <leader>sw :set list!<CR>
	nno <C-S-P> :call <SID>SynStack()<CR>

	" Treat long lines as break lines (useful when moving around in them)
	no j gj
	no k gk

	nno <leader>ra :%s/
	nno <silent> <leader>w :silent w<CR>:echo "File saved!"<cr>

	nno =p "+p
	nno +P "+P

	" Run files from vim
		au FileType tex nno <leader><CR> :!make show &<CR><CR>
		au FileType perl nno <leader><CR> :! perl %<CR>
		au FileType perl nno <leader>'<CR> :! perl %
		au FileType markdown nno <silent> <leader><CR> :! pandoc % --template eisvogel -o /tmp/vim-render.pdf && mupdf /tmp/vim-render.pdf &<CR><CR>
		au FileType sh nno <leader><CR> :! sh %<CR>
		au FileType sh nno <leader>'<CR> :! sh %
		au FileType vim nno <leader><CR> :so %<CR>
		au FileType sh,bash,perl,python,ruby nno <leader>ex :! chmod +x %<CR>
		au FileType python nno <leader><CR> :! python %<CR>
		au FileType python nno <leader>'<CR> :! python %
	
	" Moving characters
		nno L xp
		" A little buggy  on the last character
		nno H xhP

	" Buffers
		nno <silent> gj :bp<CR>
		nno <silent> gk :bn<CR>

		nno <silent> gJ :tabp<CR>
		nno <silent> gK :tabn<CR>

		nno <silent> <leader>q :bdelete<CR>

	" Tabs
		nno <leader>tn :tabnew<CR>

		nno <silent> <leader>1 1gt<cr>
		nno <silent> <leader>2 2gt<cr>
		nno <silent> <leader>3 3gt<cr>
		nno <silent> <leader>4 4gt<cr>
		nno <silent> <leader>5 5gt<cr>

	" Splits
		" TODO: Only the window manager should handle this.  Need to figure out
		"       A way to do this without vim
		no <leader>vn :vsplit<CR>
		no <leader>hn :split<CR>

		no <C-j> <C-W>j
		no <C-k> <C-W>k
		no <C-h> <C-W>h
		no <C-l> <C-W>l

	" Folds
		nno <leader>zz v$%zf<esc>
		vno <leader>zz $%zf


" Settings
" " " "

	filetype plugin indent on

	set autoindent
	set autoread
	set cmdheight=1
	set equalalways
	set encoding=utf8
	set exrc
	set ffs=unix,dos,mac
	set foldenable
	set foldmethod=manual
	" set foldcolumn=1
	set hidden
	set hlsearch
	set ignorecase
	set lazyredraw
	set list listchars=tab:»·,trail:·
	set ls=2
	set magic
	set modeline
	set modelines=5
	set nobackup
	set noerrorbells
	set noexpandtab
	set noshowmode
	set nolist
	set notitle
	set novisualbell
	set nowrap
	set nu
	set noruler
	set secure
	set shiftwidth=3
	au FileType yaml set shiftwidth=2
	set sidescroll=1
	set showmatch
	set smartindent
	set swb="useopen"
	set sps=best,10
	set tabstop=3
	au FileType yaml set tabstop=2
	set textwidth=80
	set t_Co=256


" Ack
" " "

	if executable('ag')
	  let g:ackprg = 'ag --vimgrep'
	endif


" Airline
" " "

" https://github.com/vim-airline/vim-airline

	let g:airline_theme='ubaryd'

	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
	let g:airline#extensions#tabline#buffers_label = ''
	let g:airline#extensions#tabline#buffers_min_count = 2
	let g:airline#extensions#tabline#fnamemod = ':t'
	let g:airline#extensions#tabline#left_sep = ''
	let g:airline#extensions#tabline#left_alt_sep = ''
	let g:airline#extensions#tabline#right_alt_sep = ''
	let g:airline#extensions#tabline#right_sep = ''
	let g:airline#extensions#tabline#show_close_button = 0

	let g:airline#extensions#whitespace#mixed_indent_algo = 2
	let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing', 'long' ]

	let g:airline_detect_modified=1
	let g:airline_detect_paste=1
	let g:airline_detect_spell=0

	" powerline symbols
	let g:Powerline_symbols = 'fancy'
	let g:airline_powerline_fonts = 1
	"let g:airline_left_alt_sep = ''
	"let g:airline_right_alt_sep = ''
	let g:airline_left_alt_sep = ''
	let g:airline_right_alt_sep = ''

	function! MyOverride(...)
		call a:1.add_section('StatusLine', ' ' . g:airline_section_a . ' ')
		call a:1.add_section('StatusLine2', ' ' . g:airline_section_b . ' ')
		call a:1.add_section('StatusLine3', ' ' )
		call a:1.split()
		call a:1.add_section('StatusLine2', ' ' . g:airline_section_x . ' ')
		call a:1.add_section('ErrorLine', ' ' . g:airline_section_error . ' ' . g:airline_section_warning . ' ')
		call a:1.add_section('StatusLine', ' %p%% ')

		return 1 "tells the pipeline to write the statusline with the builder
	endfunction
	call airline#add_statusline_func('MyOverride')


" csv.vim
" " "

" TODO: Configure airline for csv.vim
" https://github.com/chrisbra/csv.vim


" ctrlp.vim
" " "

" TODO: Check out ctrlp.vim
" https://github.com/ctrlpvim/ctrlp.vim


" denite.nvim
" " "

" TODO: Check out denite
" https://github.com/Shougo/denite.nvim


" Eclim
" " "

	let g:EclimCompletionMethod = 'omnifunc'


" fzf
" " "

	no <silent> <leader>e :FZF<CR>


" MRU
" " "

	nno <silent> <leader>ru :MRU<cr>
	let MRU_File = $XDG_CONFIG_HOME . '/vim/.vim_mru_files'
	let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*'
	let MRU_Window_Height = 15


" Nerdtree
" " "

	no <silent> <leader>ff :NERDTreeToggle<CR>
	" Closes vim if nerdtree is the only open window
	" Causes error on regular nerdtree close
	"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

	" Changing the arrows
	let g:NERDTreeDirArrows = 1
	let g:NERDTreeDirArrowExpandable = '▸'
	let g:NERDTreeDirArrowCollapsible = '▾'
	" Close nerdtree on file open
	let g:NERDTreeQuitOnOpen = 1

	let g:NERDTreeMouseMode = 2

	let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "+",
    \ "Untracked" : "?",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "-",
    \ "Dirty"     : "X",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


" Rainbow Parentheses
" " "

"	au VimEnter * RainbowParenthesesToggle
"	au Syntax * RainbowParenthesesLoadRound
"	au Syntax * RainbowParenthesesLoadSquare
"	au Syntax * RainbowParenthesesLoadBraces


" Syntastic
" " "

	let g:syntastic_perl_checkers = 'perl'
	let g:syntastic_enable_perl_checker = 1
	let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

	let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_open = 1
	let g:syntastic_check_on_wq = 0


" vimpyter
" " "

	au Filetype ipynb nno <silent><localleader>b :VimpyterInsertPythonBlock<CR>
	au Filetype ipynb nno <silent><localleader>j :VimpyterStartJupyter<CR>
	au Filetype ipynb nno <silent><localleader>n :VimpyterStartNteract<CR>


" vim-go
" " "

	au FileType go nno <silent><localleader><CR> :GoRun<CR>
	au FileType go nno <silent><localleader>b :GoBuild<CR>
	au FileType go nno <silent><localleader>c :GoCallers<CR>
	au FileType go nno <silent><localleader>d :GoDescribe<CR>
	au FileType go nno <silent><localleader>e :GoErrCheck<CR>
	au FileType go nno <silent><localleader>f :GoFiles<CR>
	au FileType go nno <silent><localleader>g :GoCallgraph<CR>
	au FileType go nno <silent><localleader>i :GoImplements<CR>
	au FileType go nno <silent><localleader>l :GoLint<CR>
	au FileType go nno <silent><localleader>p :GoChannelPeers<CR>
	au FileType go nno <silent><localleader>r :GoRename<CR>
	au FileType go nno <silent><localleader>t :GoTest<CR>

	let g:go_fmt_command = "goimports"
	let g:go_fmt_fail_silently = 1
	let g:go_auto_sameids = 1
	let g:go_highlight_functions = 1
	let g:go_highlight_methods = 1
	let g:go_highlight_structs = 1
	let g:go_highlight_interfaces = 1
	let g:go_highlight_operators = 1
	let g:go_highlight_build_constraints = 1

" vim-linux-coding-style
" " "

let g:linuxsty_patterns = [ "/home/ryan/documents/sources/linux", "/home/ryan/documents/projects/llml" ]


" vim-markdown
" " "

let g:vim_markdown_folding_disabled = 1

" vim-tidal
" " "

au BufEnter,BufWinEnter,BufNewFile,BufRead *.sc,*.scd set filetype=supercollider
au filetype tidal nmap <buffer> <silent> <C-h> :TidalHush<CR>

let g:tidal_target = "terminal"
let g:scTerminalBuffer = "on"
let g:scSplitDirection = "h"
let g:scSplitSize = 30

" Vim You Autocorrect
" " "

"DisableAutocorrect


" You Complete Me
" " "

	"let g:ycm_path_to_python_interpreter = '/usr/bin/python2'
	"let g:ycm_global_ycm_extra_conf = '/home/ryan/.config/vim/.ycm_extra_conf.py'

	" Debug
	"let g:ycm_server_keep_logfiles = 1
	"let g:ycm_server_log_level = 'debug'
	"let g:ycm_warning_symbol = '>'
	"let g:ycm_error_symbol = '>>'
	"let g:ycm_server_use_vim_stdout = 1

	let g:syntastic_markdown_mdl_exec = 'markdownlint'
